{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6168cf89a108f278d18a8270a709c0851c23fffe378474396e86c89a6bb611e6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "882067",
    "logsBloom": "0x
    "blockHash": "0x6a74454ae3530e4ced2fa276fe2406a2a67f0eda2ab1e6813f1cdf032c571225",
    "transactionHash": "0x6168cf89a108f278d18a8270a709c0851c23fffe378474396e86c89a6bb611e6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "882067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "d70f7ec8980d89fbe26b2de704fe96fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    // also immutable dose not save the variable in storage making it cost less gas\\n    address private i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getPrice() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x4818aed4c5e48ef03328c45780d6f03e85b3e21771d41802504f44815571beeb\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xafacc74fead86aa6a224262a47b60e2885a3f362d5820e137529276673e79a99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f80380380610f808339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610e27806101596000396000f3fe6080604052600436106100705760003560e01c8063893d20e81161004e578063893d20e8146100f457806398d5fdca1461011f578063b60d42881461014a578063d7b4750c1461015457610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610839565b610191565b6040516100a9919061087f565b60405180910390f35b3480156100be57600080fd5b506100c76101d9565b005b3480156100d557600080fd5b506100de61047f565b6040516100eb919061087f565b60405180910390f35b34801561010057600080fd5b5061010961048c565b60405161011691906108a9565b60405180910390f35b34801561012b57600080fd5b506101346104b6565b6040516101419190610923565b60405180910390f35b6101526104e0565b005b34801561016057600080fd5b5061017b6004803603810190610176919061096a565b61061a565b60405161018891906108a9565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610260576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156102e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161029a575b5050505050905060005b815181101561036e57600082828151811061030c5761030b610997565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610366906109f5565b9150506102ee565b50600067ffffffffffffffff81111561038a57610389610a3d565b5b6040519080825280602002602001820160405280156103b85781602001602082028036833780820191505090505b50600190805190602001906103ce92919061072f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f590610a9d565b60006040518083038185875af1925050503d8060008114610432576040519150601f19603f3d011682016040523d82523d6000602084013e610437565b606091505b505090508061047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047290610b0f565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066290919063ffffffff16565b1015610560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055790610b7b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ae9190610b9b565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600182815481106106305761062f610997565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066e8361069e565b90506000670de0b6b3a764000085836106879190610bcf565b6106919190610c40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610cfe565b5050509150506402540be400816107279190610d79565b915050919050565b8280548282559060005260206000209081019282156107a8579160200282015b828111156107a75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074f565b5b5090506107b591906107b9565b5090565b5b808211156107d25760008160009055506001016107ba565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610806826107db565b9050919050565b610816816107fb565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60006020828403121561084f5761084e6107d6565b5b600061085d84828501610824565b91505092915050565b6000819050919050565b61087981610866565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107fb565b82525050565b60006020820190506108be600083018461089a565b92915050565b6000819050919050565b60006108e96108e46108df846107db565b6108c4565b6107db565b9050919050565b60006108fb826108ce565b9050919050565b600061090d826108f0565b9050919050565b61091d81610902565b82525050565b60006020820190506109386000830184610914565b92915050565b61094781610866565b811461095257600080fd5b50565b6000813590506109648161093e565b92915050565b6000602082840312156109805761097f6107d6565b5b600061098e84828501610955565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0082610866565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3257610a316109c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a87600083610a6c565b9150610a9282610a77565b600082019050919050565b6000610aa882610a7a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af9600b83610ab2565b9150610b0482610ac3565b602082019050919050565b60006020820190508181036000830152610b2881610aec565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610b65601b83610ab2565b9150610b7082610b2f565b602082019050919050565b60006020820190508181036000830152610b9481610b58565b9050919050565b6000610ba682610866565b9150610bb183610866565b9250828201905080821115610bc957610bc86109c6565b5b92915050565b6000610bda82610866565b9150610be583610866565b9250828202610bf381610866565b91508282048414831517610c0a57610c096109c6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4b82610866565b9150610c5683610866565b925082610c6657610c65610c11565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c9081610c71565b8114610c9b57600080fd5b50565b600081519050610cad81610c87565b92915050565b6000819050919050565b610cc681610cb3565b8114610cd157600080fd5b50565b600081519050610ce381610cbd565b92915050565b600081519050610cf88161093e565b92915050565b600080600080600060a08688031215610d1a57610d196107d6565b5b6000610d2888828901610c9e565b9550506020610d3988828901610cd4565b9450506040610d4a88828901610ce9565b9350506060610d5b88828901610ce9565b9250506080610d6c88828901610c9e565b9150509295509295909350565b6000610d8482610cb3565b9150610d8f83610cb3565b9250828202610d9d81610cb3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dd557610dd46109c6565b5b8282058414831517610dea57610de96109c6565b5b509291505056fea26469706673582212202a4a94cbba910f5323dcb9623b8d6338c8254992a42622220e82309621a1ca9464736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063893d20e81161004e578063893d20e8146100f457806398d5fdca1461011f578063b60d42881461014a578063d7b4750c1461015457610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610839565b610191565b6040516100a9919061087f565b60405180910390f35b3480156100be57600080fd5b506100c76101d9565b005b3480156100d557600080fd5b506100de61047f565b6040516100eb919061087f565b60405180910390f35b34801561010057600080fd5b5061010961048c565b60405161011691906108a9565b60405180910390f35b34801561012b57600080fd5b506101346104b6565b6040516101419190610923565b60405180910390f35b6101526104e0565b005b34801561016057600080fd5b5061017b6004803603810190610176919061096a565b61061a565b60405161018891906108a9565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610260576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156102e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161029a575b5050505050905060005b815181101561036e57600082828151811061030c5761030b610997565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610366906109f5565b9150506102ee565b50600067ffffffffffffffff81111561038a57610389610a3d565b5b6040519080825280602002602001820160405280156103b85781602001602082028036833780820191505090505b50600190805190602001906103ce92919061072f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f590610a9d565b60006040518083038185875af1925050503d8060008114610432576040519150601f19603f3d011682016040523d82523d6000602084013e610437565b606091505b505090508061047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047290610b0f565b60405180910390fd5b5050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066290919063ffffffff16565b1015610560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055790610b7b565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ae9190610b9b565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600182815481106106305761062f610997565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066e8361069e565b90506000670de0b6b3a764000085836106879190610bcf565b6106919190610c40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610cfe565b5050509150506402540be400816107279190610d79565b915050919050565b8280548282559060005260206000209081019282156107a8579160200282015b828111156107a75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074f565b5b5090506107b591906107b9565b5090565b5b808211156107d25760008160009055506001016107ba565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610806826107db565b9050919050565b610816816107fb565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60006020828403121561084f5761084e6107d6565b5b600061085d84828501610824565b91505092915050565b6000819050919050565b61087981610866565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107fb565b82525050565b60006020820190506108be600083018461089a565b92915050565b6000819050919050565b60006108e96108e46108df846107db565b6108c4565b6107db565b9050919050565b60006108fb826108ce565b9050919050565b600061090d826108f0565b9050919050565b61091d81610902565b82525050565b60006020820190506109386000830184610914565b92915050565b61094781610866565b811461095257600080fd5b50565b6000813590506109648161093e565b92915050565b6000602082840312156109805761097f6107d6565b5b600061098e84828501610955565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0082610866565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3257610a316109c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a87600083610a6c565b9150610a9282610a77565b600082019050919050565b6000610aa882610a7a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610af9600b83610ab2565b9150610b0482610ac3565b602082019050919050565b60006020820190508181036000830152610b2881610aec565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610b65601b83610ab2565b9150610b7082610b2f565b602082019050919050565b60006020820190508181036000830152610b9481610b58565b9050919050565b6000610ba682610866565b9150610bb183610866565b9250828201905080821115610bc957610bc86109c6565b5b92915050565b6000610bda82610866565b9150610be583610866565b9250828202610bf381610866565b91508282048414831517610c0a57610c096109c6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4b82610866565b9150610c5683610866565b925082610c6657610c65610c11565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c9081610c71565b8114610c9b57600080fd5b50565b600081519050610cad81610c87565b92915050565b6000819050919050565b610cc681610cb3565b8114610cd157600080fd5b50565b600081519050610ce381610cbd565b92915050565b600081519050610cf88161093e565b92915050565b600080600080600060a08688031215610d1a57610d196107d6565b5b6000610d2888828901610c9e565b9550506020610d3988828901610cd4565b9450506040610d4a88828901610ce9565b9350506060610d5b88828901610ce9565b9250506080610d6c88828901610c9e565b9150509295509295909350565b6000610d8482610cb3565b9150610d8f83610cb3565b9250828202610d9d81610cb3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dd557610dd46109c6565b5b8282058414831517610dea57610de96109c6565b5b509291505056fea26469706673582212202a4a94cbba910f5323dcb9623b8d6338c8254992a42622220e82309621a1ca9464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}